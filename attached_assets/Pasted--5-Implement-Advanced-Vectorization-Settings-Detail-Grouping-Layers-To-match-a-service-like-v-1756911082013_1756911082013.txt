	5.	Implement Advanced Vectorization Settings (Detail, Grouping, Layers) – To match a service like vectorizer.ai, you should support the more advanced conversion settings that are mentioned in the code presets but not yet fully realized. In particular:
	•	Shape stacking and grouping: The presets define modes like shapeStacking: "stacked" vs "layered" vs "flat" and groupBy: "color" vs "shape" vs "none" ￼ ￼. Implement these options in the conversion process. For example, “stacked” vs “layered” might control whether overlapping shapes are split into separate layers or combined (perhaps leveraging ImageTracer’s layering parameter). “Group by color” or “group by shape” should result in the SVG <g> elements grouping paths of the same color or logically connected shape, respectively. This likely involves parsing the SVG output and restructuring it (e.g. wrapping paths with identical fill colors into a <g> with that fill). While this is an advanced feature, it will make editing the resulting SVG easier for end-users and is advertised in presets.
	•	Curve optimization and line types: Ensure the allowedCurveTypes and related settings affect the output. For Potrace, you might limit to linear segments for technical drawings or allow curves for illustrations. If the current Potrace library doesn’t support excluding certain curve types, you might need a workaround (or note it as a limitation). For ImageTracer, parameters like ltres, qtres (line/curve thresholds) are already exposed – verify that changing them in the UI alters the output detail as expected. The goal is that users can control how smooth or detailed the paths are (e.g. a “simplify” slider to reduce node count vs. preserve detail).
	•	Fine-tune default presets: Review each preset’s intended purpose (logo, icon, illustration, etc.) and ensure the underlying parameters produce optimal results for those cases. For instance, the “Logo & Brand” preset says exact color matching and maximum clarity, which means you should use preserveOriginalColors=true (multiple colors) and maybe fewer nodes (perhaps a higher threshold for simplification) to get clean, flat color areas ￼ ￼. Test a sample logo to see if the output SVG indeed has crisp edges and the correct palette. Adjust the preset parameters or code as needed (for example, the logo preset might work better with lineFit: precise and ensuring no small speckles by tweaking turdSize). This will make the presets truly useful and not just nominal.
	•	Outcome: Advanced settings will be operational, giving power users fine control and making the service robust for various use-cases. The SVG’s structure (groupings, layers, curves) will match the chosen settings, much like how vectorizer.ai offers options for layering modes, color grouping, stroke/fill preferences, etc.
